<?php include('_header.php'); ?>
<?php
require_once(__ROOT__.'/classes/Aws.php'); 
require_once(__ROOT__.'/classes/Utils.php');
require_once(__ROOT__.'/classes/UserFactory.php');
require_once(__ROOT__.'/classes/Correlation.php');


$user_id = $_SESSION ['user_id'];
$user_name = $_SESSION ['user_name'];
$user_email = $_SESSION ['user_email'];
$user = UserFactory::getUser($user_name, $user_email);
$utils = new Utils();
$corr = new Correlation();
$aws = new aws();

if ($_SESSION['role'] == 'USER') {
?>

<main>
<div class="container-fluid  style="padding-top: 100px;"">

<h5> Events Dashboard</h5>
<h6>What is there on this dashboard ?</h6>
<p>Event dashboard uses ML to learn the behaviour of your devices. Over time it is able to recognize the orientation, proximity, activity pattern etc in a grid of devices. 
The ML engine then uses this information to create unusual events, things that happen across cameras. In addtion you can also do template searches in history.
</p>

<p>Event dashboard helps you in analyzing the feed and quickly zero in on the information that you need. You get quick answers to questions like:</p>
<ol style="list-style: none; font-size: 14px; line-height: 32px; font-weight: bold;">
<li style="clear: both;">Where all did a intruder go ?</li>
<li style="clear: both;">When a employee left office, who was he meeting outside ?</li>
<li style="clear: both;">A men in a store was caught with stolen stuff, from where and how he picked it up ?</li>
<li style="clear: both;">A person comes to your store, did he buy anything ?</li>
</ol>

<hr/>
<h6>How do I get this enabled ?</h6>

<p>Events are charged as you use them. You will need more then one camera for them to form an intelligent grid.  You need to setup your subscription to enable the event dashboard. Write to info@ibeyonde.com for further info. </p>

</div>
</main>
<?php 
return;
}
?>

<main>
<?php 
$boxes = $user->getBoxes();
$pair=0;
foreach ( $boxes as $box ) {
    error_log("Processing box ------- $box");
    $devices = $user->getDevices ();
    $dev_list = array();
    $gd=null;
    foreach ( $devices as $device){
        error_log("Device $device->uuid box name is $device->box_name");
        if ($device->box_name != $box || $device->timezone==null) continue;
        $dev_list[$device->uuid] = $device;
        $gd=$device;
        error_log($device->device_name);
    }
    if (count($dev_list) < 2) continue;
    error_log("Dev list count ".count($dev_list));
    $pair = $pair + 1;
    $device_tz = new DateTimeZone($gd->timezone);
    $found=0;
    foreach($utils->comb(2, array_keys($dev_list)) as $c){
        $key="";
        $dev1 = $dev_list[$c[0]];
        $dev2 = $dev_list[$c[1]];
        //if ($dev1->visibleip != $dev2->visibleip) continue;
        if ($c[0] < $c[1]) {
            $key=$c[0].".".$c[1];
        }
        else {
            $key=$c[1].".".$c[0];
        }
        error_log("Key = ".$key);
        $cor_val = $corr->getCorrelation($key);
        if ($cor_val == null) continue;
        error_log("Correlation ".$cor_val->correlation);
        if (intval($cor_val->correlation) > 150){
            $found= $found +1;
            $now=Utils::datetimeNow($dev1->timezone);
            error_log("TZ".$dev1->timezone);
            echo " <b>Events generated by " . $dev1->device_name . " and ". $dev2->device_name. " devices with correlation factor " .$cor_val->correlation. " </b><br/><hr/>";
            $motions1 = $utils->retriveMotionForCorrelation($c[0], strtotime('-1 day', $now)); 
            $motions2 = $utils->retriveMotionForCorrelation($c[1], strtotime('-1 day', $now)); 
            $times = array();
            if (isset($motions1) && count($motions1) > 1){
                foreach ($motions1 as $motion1){
                    if (intval($motion1['count']) > 2){
                        foreach ($motions2 as $motion2){
                            if (intval($motion2['count']) > 2){
                                if ($motion1['timeslice'] == $motion2['timeslice']){
                                    $times[intval($motion1['count']) + intval($motion2['count'])]=$motion1['timeslice'];
                                }
                            }
                        }
                    }
                }
                arsort($times);
                foreach( $times as $count=>$date_str){ 
                    error_log("Count = $count, Date Str = $date_str");
                    echo "<div class=row><b>&nbsp;&nbsp;&nbsp; Event timestamp: ".$date_str.":".$count."</b></div>";
                    echo '<div class=row>';
                    $path=substr($date_str, 0, 4)."/".substr($date_str, 5, 2)."/".substr($date_str, 8, 2);
                    $time_prefix=substr($date_str, 11, 2)."_".substr($date_str, 14, 2);
                    error_log($path. " Time prefix=" . $time_prefix);
                    $urls1 = $aws->loadMinuteMotionDataUrl($cor_val->uuid1, $path, $time_prefix);
                    $urls2 = $aws->loadMinuteMotionDataUrl($cor_val->uuid2, $path, $time_prefix);
                    //error_log(print_r($urls1, true));
                    //error_log(print_r($urls2, true));
                    echo '<div class="col-sm-12 col-md-6">';
                    echo '<div class="row">';
                    $i=0;
                    foreach ($urls1 as $url){
                        echo '<div class="col-sm-6 col-md-4 col-lg-2"><img src="'.$aws->getSignedFileUrl ( $url).'" alt="" class="img-responsive"  width="100%"/></div>';
                        $i=$i+1;
                    }
                    echo '</div>';
                    echo '</div>'; // end column
                    
                    echo '<div class="col-sm-12 col-md-6">';
                    echo '<div class="row">';
                    $i=0;
                    foreach ($urls2 as $url){
                        echo '<div class="col-sm-6 col-md-4 col-lg-2"><img src="'.$aws->getSignedFileUrl ( $url).'" alt="" class="img-responsive" width="100%"/></div>';
                        $i=$i+1;
                    }
                    echo '</div>';
                    echo '</div>';  // end column
                    echo '</div>';  // end row
                    assert($count == count($urls1) + count($urls2), "Inconsistent count" );
                }
            }
        }
    }
    if ($found == 0){
        echo "<h2> No common events found across your cameras </h2>";
    }    
}

if ($pair == 0){
    echo "<h5> Events are across camera pair. You need at least two cameras in a box for event lookup. </h5>";
}
?>
<div class="row">
<br/>
<hr/>
<br/>
<br/>
<hr/>
<br/>
<hr/>
<br/>
<br/>
<hr/>
<br/>
</div>
</div>
</main>
<?php include('_footer.php'); ?>
